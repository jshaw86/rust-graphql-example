extern crate juniper;
use juniper::{Executor, FieldError, FieldResult, ID};
use juniper_from_schema::graphql_schema_from_file;

graphql_schema_from_file!("schema.graphql");

pub struct Context;
impl juniper::Context for Context {}

pub struct TodoList {
    id: ID,
    name: String,
    text: String,
    done: bool,
    items: Option<Vec<Option<Item>>>,
}

impl TodoListFields for TodoList {
    fn field_id(&self, _: &Executor<'_, Context>) -> FieldResult<&ID> {
        //let id = ID::new(self.id.to_string());
        Ok(&self.id)
    }

    fn field_name(&self, _: &Executor<'_, Context>) -> FieldResult<&String> {
        Ok(&self.name)
    }
    fn field_text(&self, _: &Executor<'_, Context>) -> FieldResult<&String> {
        Ok(&self.text)
    }

    fn field_done(&self, _: &Executor<'_, Context>) -> FieldResult<&bool> {
        Ok(&self.done)
    }

    fn field_items(
        &self,
        _: &Executor<'_, Context>,
        _: &QueryTrail<'_, Item, Walked>,
    ) -> FieldResult<&Option<Vec<Option<Item>>>> {
        Ok(&self.items)
    }
}

pub struct Item {
    id: ID,
    todo_list_id: ID,
    name: String,
    due_date: String,
}

impl ItemFields for Item {
    fn field_id(&self, _: &Executor<'_, Context>) -> FieldResult<&ID> {
        Ok(&self.id)
    }

    fn field_todo_list_id(&self, _: &Executor<'_, Context>) -> FieldResult<&ID> {
        Ok(&self.todo_list_id)
    }

    fn field_name(&self, _: &Executor<'_, Context>) -> FieldResult<&String> {
        Ok(&self.name)
    }

    fn field_due_date(&self, _: &Executor<'_, Context>) -> FieldResult<&String> {
        Ok(&self.due_date)
    }
}

pub struct Query;

impl QueryFields for Query {
    /// Field method generated by `juniper-from-schema`.
    fn field_todos(
        &self,
        _executor: &Executor<Context>,
        _trail: &QueryTrail<TodoList, Walked>,
    ) -> Result<Vec<TodoList>, FieldError> {
        // TODO: implement this
        Ok(vec![])
    }
    /// Field method generated by `juniper-from-schema`.
    fn field_todo(
        &self,
        _executor: &Executor<Context>,
        _trail: &QueryTrail<TodoList, Walked>,
        _id: i32,
    ) -> Result<TodoList, FieldError> {
        // TODO: implement this
        Ok(TodoList {
            id: ID::new("1"),
            name: "foo".to_string(),
            text: "bar".to_string(),
            done: false,
            items: Some(vec![]),
        })
    }
}

pub struct Mutation;

impl MutationFields for Mutation {
    /// Field method generated by `juniper-from-schema`.
    fn field_create_todo(
        &self,
        _executor: &Executor<Context>,
        _trail: &QueryTrail<TodoList, Walked>,
        _todo: NewTodo,
        _items: Vec<NewItem>,
    ) -> Result<TodoList, FieldError> {
        // TODO: implement this
        Ok(TodoList {
            id: ID::new("1"),
            name: "foo".to_string(),
            text: "bar".to_string(),
            done: false,
            items: Some(vec![]),
        })
    }
    /// Field method generated by `juniper-from-schema`.
    fn field_add_items<'a>(
        &self,
        _executor: &Executor<Context>,
        _trail: &QueryTrail<Item, Walked>,
        _todo_list_id: i32,
        _items: Vec<NewItem>,
    ) -> Result<Vec<Item>, FieldError> {
        // TODO: implement this
        Ok(vec![])
    }
}
